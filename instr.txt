SPECIALS:
#Arithmetic
ADD	100000 #add 	$d, $s, $t 	-> $d = $s + $t 
AND	100100 #and 	$d, $s, $t 	-> $d = $s & $t 
OR	100101 #or  	$d, $s, $t 	-> $d = $s | $t 
XOR	100110 #xor 	$d, $s, $t 	-> $d = $s ^ $t

#Multiply
DIV	011010 #div 	$s, $t		-> lo = $s / $t; hi = $s % $t
SUB	100010 #sub 	$d, $s, $t	-> $d = $s - $t
MFHI	010000 #mfhi	$d		-> $d = hi
MFLO	010010 #mflo	$d		-> $d = lo 
MULT	011000 #mult	$s, $t		-> hi:lo = $s * $t

#Shifters
ROTR	000010
SLL	000000 #sll	$d, $t, a 	-> $d = $t << a 
SLT	101010 #slt	$d, $s, $t 	-> $d = ($s < $t)
SRL	000010 #srl	$d, $t, a	-> $d = $t >>> a

#Branch
JR	001000 #jr	o labelR 	-> pc = $s 
SYSCALL	001100 #syscall 		-> osef

#No name :'(
NOP	000000 #nop			-> do nothing

NORMALS:
#Arithmetic
ADDI	001000 #addi	$d, $s, i	-> $d = $s + SE(i)
LUI	001111 #lui	$d, i		-> $d = les 16 premiers bits de i

#Branch
BEQ	000100 #beq	o $s, $t, label	-> if ($s == $t) pc += i << 2 
BGTZ	000111 #bgtz	o $s, label 	-> if ($s > 0) pc += i << 2
BLEZ	000110 #blez	o $s, label	-> if ($s <= 0) pc += i << 2 
BNE	000101 #bne	o $s, $t, label -> if ($s != $t) pc += i << 2
J	000010 #j	o label 	-> pc += i << 2 	
JAL	000011 #jal	o label 	-> $31 = pc; pc += i << 2 

#Load/Store
LW	100011 #lw	o $t, i ($s)	-> $t = MEM [$s + i]:4
SW	101011 #sw	o $t, i ($s)	-> MEM [$s + i]:4 = $t

#http://alumni.cs.ucr.edu/~vladimir/cs161/mips.html